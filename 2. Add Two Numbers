/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode l3=new ListNode();
        ListNode l4=null;
         int carry=0;
        while(l1!=null && l2!=null)
        {
          int sum=(l1.val+l2.val+carry)%10;
          carry=(l1.val+l2.val+carry)/10;
            
            if(l4==null)
            {
                l3.val=sum;
                l4=l3;
                
            }
            else
            {
                l4.next=new ListNode();
                l4.next.val=sum;
                l4=l4.next;
                
            }
            
            
            l1=l1.next;
            l2=l2.next;
            
        }
        
          while(l1!=null)
        {
          int sum=(l1.val+carry)%10;
          carry=(l1.val+carry)/10;
            
            if(l4==null)
            {
                l3.val=sum;
                l4=l3;
                
            }
            else
            {
                l4.next=new ListNode();
                l4.next.val=sum;
                l4=l4.next;
            }
            
            
            l1=l1.next;   
            
        }
          while(l2!=null)
        {
          int sum=(l2.val+carry)%10;
          carry=(l2.val+carry)/10;
            
            if(l4==null)
            {
                l3.val=sum;
                l4=l3;
                
            }
            else
            {
                l4.next=new ListNode();
                l4.next.val=sum;
                 l4=l4.next;
            }
            
           
            l2=l2.next;  
            
        }
        
        if(carry!=0)
        {
            
            l4.next=new ListNode();
                l4.next.val=1 ;
        }
        
        return l3;
    }
}
